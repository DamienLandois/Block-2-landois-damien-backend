name: Backend CI/CD

on:
  push:
  pull_request:
    branches: ["master"]  

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_USER: ${{ secrets.MYSQL_USER }}
      DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      DB_NAME: ${{ secrets.MYSQL_DATABASE }}
      NODE_ENV: test
      PORT: 3000
      TZ: UTC
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      DATABASE_URL: mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@127.0.0.1:3306/${{ secrets.MYSQL_DATABASE }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy

      - name: Run linter
        run: npm run lint

      - name: Run unit tests
        run: npm run test

      - name: Run e2e tests
        run: npm run test:e2e


  build-and-push:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Docker for GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate version number
        id: version
        run: |
          LATEST_TAG=$(git tag -l "v*.*" | sort -V | tail -n1)
          
          if [ -z "$LATEST_TAG" ]; then
            NEW_VERSION="1.0"
          else
            CURRENT_VERSION=${LATEST_TAG#v}
            MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
            
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="${MAJOR}.${NEW_MINOR}"
          fi
          
          echo "new_version=v${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "version_number=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Nouvelle version: v${NEW_VERSION}"

      - name: Create and push new tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ steps.version.outputs.new_version }}
          git push origin ${{ steps.version.outputs.new_version }}

      - name: Set image names
        run: |
          REPO_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          BASE_IMAGE="ghcr.io/${REPO_LOWER}"
          
          echo "IMAGE_LATEST=${BASE_IMAGE}:latest" >> $GITHUB_ENV
          echo "IMAGE_VERSIONED=${BASE_IMAGE}:${{ steps.version.outputs.version_number }}" >> $GITHUB_ENV
          echo "BASE_IMAGE=${BASE_IMAGE}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          echo "üê≥ Construction de l'image Docker..."
          docker build -t $IMAGE_LATEST -t $IMAGE_VERSIONED .
          echo "‚úÖ Images construites:"
          echo "  - $IMAGE_LATEST"
          echo "  - $IMAGE_VERSIONED"

      - name: Push Docker images
        run: |
          echo "üì§ Publication des images..."

          docker push $IMAGE_LATEST
          echo "‚úÖ Image 'latest' publi√©e"

          docker push $IMAGE_VERSIONED
          echo "‚úÖ Image 'v${{ steps.version.outputs.version_number }}' publi√©e"
          
          echo "üéâ Toutes les images sont disponibles:"
          echo "  - ghcr.io/$(echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]'):latest"
          echo "  - ghcr.io/$(echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]'):${{ steps.version.outputs.version_number }}"

#test v1.1