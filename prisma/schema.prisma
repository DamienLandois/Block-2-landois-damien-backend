generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  firstname   String?
  name        String?
  email       String    @unique
  password    String
  phoneNumber String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  role        UserRole  @default(USER)
  bookings    Booking[]
}

model Massage {
  id          String    @id @default(cuid())
  name        String
  description String    @db.Text
  image       String?
  price       Float
  duration    Int
  position    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
}

model TimeSlot {
  id        String    @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
}

model Booking {
  id         String        @id @default(cuid())
  userId     String
  massageId  String
  timeSlotId String
  startTime  DateTime
  endTime    DateTime
  status     BookingStatus @default(PENDING)
  notes      String?       @db.Text
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  massage    Massage       @relation(fields: [massageId], references: [id], onDelete: Cascade)
  timeSlot   TimeSlot      @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([massageId], map: "Booking_massageId_fkey")
  @@index([userId], map: "Booking_userId_fkey")
}

enum UserRole {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
