// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model User {
  id        String   @id @default(cuid())
  firstname String?
  name      String?
  email     String   @unique
  password  String
  phoneNumber String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookings  Booking[]
}

model Massage {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  image       String
  price       Float
  duration    Int      // attention dur√©e en minutes (convertie en h/m en front)
  position    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    Booking[]
}

model TimeSlot {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookings  Booking[]
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  massageId   String
  timeSlotId  String
  status      BookingStatus @default(PENDING)
  notes       String?       @db.Text
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  massage     Massage  @relation(fields: [massageId], references: [id], onDelete: Cascade)
  timeSlot    TimeSlot @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  
  @@unique([timeSlotId, massageId])
}